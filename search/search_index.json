{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Powerful application launcher with reproducible software environments , for visual effects, feature animation and AAA-games productions. Learn more.. Download Reproducible Environment Precision authoring. Precision use. Control over the environment within which to run software is critical to the success of any studio working on more than one project, not to mention multiple projects concurrently. Establish complex relationships between software, applications and projects with bleeding-rez , the underlying framework powering Allspark . Dual Representation Allspark is but a shell. Anything done via the GUI is available via the command-line, using standard Rez commands. $ rez env alita maya -q > $ echo \"Hello Rez!\" Hello Rez! Environment Management Preview the environment, prior to launching an application. Make changes interactively as you develop or debug complex dependency chains. Console Stay on top of current events. The terminal replicates what a console might say. Process Management Organise your many running processes in a compact way. Give each instance of Maya a unique name, group them, color them, bring-to-front and mass-kill instances to establish available memory in a hurry. Customisation Full theming support with pre-made color palettes to choose from. Interactively edit the underlying CSS and store them as your own. Drag panels around, establish a super-layout with everything visible at once. Make it yours. Allspark is free and open source (LGPL). Let's get this show on the road. Learn more.. Download","title":"Home"},{"location":"guides/","text":"In development Allspark is currently being developed and is not yet ready for use. If you're interested in early-access to collaborate and or contribute, get in touch . A 1.0 is scheduled for release in early August 2019. Setup The benefit of using Allspark is that it provides the power and flexibility of Rez to developers and package authors and a graphical user interface for artists. Developers gain fine control over what software, libraries, applications and projects are made available to artists, along with any interdependencies therein. For example, you may be working on Alita using a particular version of Maya, a specific set of plug-ins made available therein along with their versions, each of which needing to be compatible with both Maya and each other. So the first thing we need to do is get you setup with Rez. Prerequisities git python - 2 . 7 + , < 4 . 0 pip - 19 + Windows-only for now. python -m pip install bleeding-rez --user rez bind --quickstart This will get Rez setup on your system. Trouble? If the above command didn't work, ensure your Python `bin/Scripts` path is available on `PATH`. python -c \"import rez;print(rez)\" # c:\\Python37\\Lib\\site-packages\\rez\\__init__.py # PowerShell $env :PATH + = \";c:\\python37\\scripts\" # cmd.exe set PATH = c: \\p ython37 \\S cripts ; %PATH% git clone https://github.com/mottosso/rez-scoopz.git git clone https://github.com/mottosso/rez-pipz.git cd rez-scoopz rez build --install Allspark is used to visually list applications in a given project, including their requirements. python -m pip install bleeding-rez -U --user rez env allspark bleeding_rez pyside2 -- python -m allspark Package Path The recommended layout for Rez packages are as follows. int / Internal projects, such as core_pipeline . You develop and release new versions internally. ext / External projects, such as pyblish and Qt . py , you typically install these with rez env pipz -- install td / Packages developed by TDs themselves, such as small utility scripts proj / Project such as ATC and MST3 app / Applications, such as maya and nuke converted / Automatically converted packages from the old Template-based system There are two additional paths. ~/ packages Your local development packages, from your home directory ~/ . packages Your localised packages External Packages - Pipz Any package from PyPI can be installed using a utility package called pipz . $ rez env pipz -- install pyblish-base --release See rez-pipz for details. External Packages - Scoopz Any package from Scoop can be installed using another utility package called scoopz . $ rez env scoopz -- install python python27 git See rez-scoopz for details. Localisation For greater performance, any package may be localised to your local disk. See rez-localz for details. Example $ rez env pyside2 allspark bleeding_rez -- python -m allspark ============================== allspark ( 1 .1.79 ) ============================== - Loading Rez.. ok - 0 .75s - Loading Qt.. ok - 6 .14s - Loading allspark.. ok - 0 .53s - Loading preferences.. ok - 0 .00s ------------------------------ Notice how long it took to load Qt , let's localise this. $ rez env localz -- localise PySide2 Now try launching again. $ rez env pyside2 allspark bleeding_rez -- python -m allspark rez env pyside2 allspark bleeding_rez -- python -m allspark ============================== allspark ( 1 .1.79 ) ============================== - Loading Rez.. ok - 0 .91s - Loading Qt.. ok - 0 .36s - Loading allspark.. ok - 0 .70s - Loading preferences.. ok - 0 .00s ------------------------------ That's much better. Disk Space To save disk space, you can delete any or all localised packages from your ~/ . packages path. start %USERPROFILE% \\. packages","title":"Guides"},{"location":"guides/#in-development","text":"Allspark is currently being developed and is not yet ready for use. If you're interested in early-access to collaborate and or contribute, get in touch . A 1.0 is scheduled for release in early August 2019.","title":"In development"},{"location":"guides/#setup","text":"The benefit of using Allspark is that it provides the power and flexibility of Rez to developers and package authors and a graphical user interface for artists. Developers gain fine control over what software, libraries, applications and projects are made available to artists, along with any interdependencies therein. For example, you may be working on Alita using a particular version of Maya, a specific set of plug-ins made available therein along with their versions, each of which needing to be compatible with both Maya and each other. So the first thing we need to do is get you setup with Rez. Prerequisities git python - 2 . 7 + , < 4 . 0 pip - 19 + Windows-only for now. python -m pip install bleeding-rez --user rez bind --quickstart This will get Rez setup on your system. Trouble? If the above command didn't work, ensure your Python `bin/Scripts` path is available on `PATH`. python -c \"import rez;print(rez)\" # c:\\Python37\\Lib\\site-packages\\rez\\__init__.py # PowerShell $env :PATH + = \";c:\\python37\\scripts\" # cmd.exe set PATH = c: \\p ython37 \\S cripts ; %PATH% git clone https://github.com/mottosso/rez-scoopz.git git clone https://github.com/mottosso/rez-pipz.git cd rez-scoopz rez build --install Allspark is used to visually list applications in a given project, including their requirements. python -m pip install bleeding-rez -U --user rez env allspark bleeding_rez pyside2 -- python -m allspark","title":"Setup"},{"location":"guides/#package-path","text":"The recommended layout for Rez packages are as follows. int / Internal projects, such as core_pipeline . You develop and release new versions internally. ext / External projects, such as pyblish and Qt . py , you typically install these with rez env pipz -- install td / Packages developed by TDs themselves, such as small utility scripts proj / Project such as ATC and MST3 app / Applications, such as maya and nuke converted / Automatically converted packages from the old Template-based system There are two additional paths. ~/ packages Your local development packages, from your home directory ~/ . packages Your localised packages","title":"Package Path"},{"location":"guides/#external-packages-pipz","text":"Any package from PyPI can be installed using a utility package called pipz . $ rez env pipz -- install pyblish-base --release See rez-pipz for details.","title":"External Packages - Pipz"},{"location":"guides/#external-packages-scoopz","text":"Any package from Scoop can be installed using another utility package called scoopz . $ rez env scoopz -- install python python27 git See rez-scoopz for details.","title":"External Packages - Scoopz"},{"location":"guides/#localisation","text":"For greater performance, any package may be localised to your local disk. See rez-localz for details. Example $ rez env pyside2 allspark bleeding_rez -- python -m allspark ============================== allspark ( 1 .1.79 ) ============================== - Loading Rez.. ok - 0 .75s - Loading Qt.. ok - 6 .14s - Loading allspark.. ok - 0 .53s - Loading preferences.. ok - 0 .00s ------------------------------ Notice how long it took to load Qt , let's localise this. $ rez env localz -- localise PySide2 Now try launching again. $ rez env pyside2 allspark bleeding_rez -- python -m allspark rez env pyside2 allspark bleeding_rez -- python -m allspark ============================== allspark ( 1 .1.79 ) ============================== - Loading Rez.. ok - 0 .91s - Loading Qt.. ok - 0 .36s - Loading allspark.. ok - 0 .70s - Loading preferences.. ok - 0 .00s ------------------------------ That's much better. Disk Space To save disk space, you can delete any or all localised packages from your ~/ . packages path. start %USERPROFILE% \\. packages","title":"Localisation"}]}